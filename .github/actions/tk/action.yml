name: build_tk
description: 'Build Tk library'

inputs:
  cmake_generator:
    description: 'Makefile generator used by CMake'
    required: true
    default: 'Unix Makefiles'

runs:
  using: "composite"
  steps:
    - name: Tk - Unix - Build & Install
      if: inputs.cmake_generator == 'Unix Makefiles'
      run: |
        echo '### download ###'
        cd ~
        git clone https://github.com/tcltk/tk.git
        echo '### configure ###'
        cd tk/unix/
        ./configure --enable-64bit
        echo '### compile ###'
        make -j 8
        echo '### install ###'
        sudo make install
        echo '### include dir ###'
        cd /usr/local/include/
        pwd
        ls -d */
        ls -c -ltd -- *tk*
        echo '### lib dir ###'
        cd /usr/local/lib
        pwd
        ls -d */
        ls -c -ltd -- *tk*
      shell: bash

    - name: Tk - MinGW - Build
      if: inputs.cmake_generator == 'MinGW Makefiles'
      run: |
        echo '### download ###'
        cd ~
        git clone https://github.com/tcltk/tk.git
        echo '### configure ###'
        cd tk/win/
        ./configure --enable-64bit --disable-zipfs
        echo '### compile ###'
        make -j 8
        echo '### install ###'
        make install
        echo '### include dir ###'
        cd /mingw64/include/
        pwd
        ls -d */
        ls -c -ltd -- *tk*
        echo '### lib dir ###'
        cd /mingw64/lib/
        pwd
        ls -d */
        ls -c -ltd -- *tk*
      shell: msys2 {0}

    - name: Tk - VS17 - Build
      if: inputs.cmake_generator == 'Visual Studio 17 2022'
      run: |
        echo '### download ###'
        cd ~
        git clone https://github.com/tcltk/tk.git
        cd tk/win/
        echo '### modified rules.vc ###'
        (Get-Content -Path rules.vc) -Replace 'tsgx', 'sgx' | Set-Content -Path rules.vc
        echo '### run nmake ###'
        (get-command nmake).Path
        nmake -nologo -f makefile.vc all install
        echo '### install ###'
        cp -Path 'C:/Tcl' -Destination '${{github.workspace}}/3rdparty/tcltk-vc17-x64-all' -Recurse
        tree '${{github.workspace}}/3rdparty' /f /a
      shell: pwsh
        
#       echo '### modified buildall.vc.bat ###'
#       $buildallpath = (get-command VsDevCmd.bat).Path
#       echo $buildallpath
#       (get-command nmake).Path
#       (Get-Content -Path buildall.vc.bat) `
#       -Replace 'off', 'on' `
#       -Replace 'call \".*vcvars32.bat\"', 'call \"$buildallpath\" amd64' ` 
#       -Replace 'set INSTALLDIR=.*Tcl', 'set INSTALLDIR=${{github.workspace}}/3rdparty/tcltk-vc17-x64-release' `
#       -Replace 'htmlhelp', 'install' `
#       -Replace 'shell', 'shell install' |
#       Set-Content -Path buildall.vc.bat
#       Get-Content -Path buildall.vc.bat
#       tree 'C:\Users\runneradmin\tk\win\Release_AMD64_VC1934' /f /a
#       ./buildall.vc.bat

#      -Replace 'call \".*vcvars32.bat\"', 'set \"VSCMD_START_DIR=%CD%\"\ncall "$buildallpath" amd64' ` 
