name: compress
description: 'Compress resulting file form the build depending on os'

inputs:
  bin_dir:
    description: 'Binaries catalogue'
    required: true
    default: 'lin64/'
  compress:
    description: 'Compress command'
    required: true
    default: 'tar -czvf'
  compress_ext:
    description: 'Compress extension'
    required: true
    default: 'UnixMake.tar.gz'
  os:
    description: 'Operating system'
    required: true
    default: 'ubuntu-latest'

runs:
  using: "composite"
  steps:

    - name: Linux & MacOS Compress Artefacts
      if: matrix.cmake_generator == 'Unix Makefiles'
      run: |
        cd '${{github.workspace}}/build'
        ls
        set -x
        ${{inputs.compress}} OCCTbuild_${{inputs.os}}_${{inputs.compress_ext}} include ${{inputs.bin_dir}} 
      shell: bash

    - name: MinGW Compress Artefacts
      if: matrix.cmake_generator == 'MinGW Makefiles'
      run: |
        cd '${{github.workspace}}/build'
        ls
        Set-PSDebug -Trace 1
        ${{inputs.compress}} OCCTbuild_${{inputs.os}}_${{inputs.compress_ext}} include ${{inputs.bin_dir}} 
      shell: pwsh

    - name: VS17 Compress Artefacts
      if: matrix.cmake_generator == 'VS17'
      run: |
        pwd
        ls
#       echo '${{inputs.compress}} OCCTbuild_${{ inputs.os }}_${{ inputs.compress_ext}} ${{ github.workspace }}/build/include/ ${{ github.workspace }}/build/win64/' 
#       echo '***'
#       ${{ inputs.compress}} OCCTbuild_${{ inputs.os }}_${{ inputs.compress_ext}} '${{ github.workspace }}/build/include/' '${{ github.workspace }}/build/win64/' 
      shell: pwsh 
#       cd '${{github.workspace}}/build'
